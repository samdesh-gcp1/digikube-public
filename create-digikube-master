#!/bin/bash
# Main script to create master setup

# Input parameters - none 

#################################################################
# Edit the following values as per your setup
#----------------------------------------------------------------
DIGIKUBE_MASTER_PROJECT="digikube-master3"
DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME="digikube-core-repo-access-token"
DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME="digikube-instance-repo-access-token"
DIGIKUBE_CLOUD_REGION="us-central1"


#################################################################
# Create master project
#----------------------------------------------------------------

getMasterProject=$(gcloud projects list --filter="project_id=${DIGIKUBE_MASTER_PROJECT}" | grep "${DIGIKUBE_MASTER_PROJECT}" |  awk '{print $1}')
if [[ $? -gt 0 ]]; then
	echo "WARN: Error while checking availability of ${DIGIKUBE_MASTER_PROJECT} project.  Exiting..."
	exit 1
else
	if [[ "${getMasterProject}" == "${DIGIKUBE_MASTER_PROJECT}" ]]; then
		echo "INFO: ${DIGIKUBE_MASTER_PROJECT} project already available.  Reusing existing project."
	else
		gcloud projects create "${DIGIKUBE_MASTER_PROJECT}" --labels="group=digikube,version=0_1" --name="${DIGIKUBE_MASTER_PROJECT}"
		if [[ $? -gt 0 ]]; then
			echo "ERROR: Error while creating ${DIGIKUBE_MASTER_PROJECT} project"
		else
			echo "INFO: Created ${DIGIKUBE_MASTER_PROJECT} project"
		fi
	fi
	billingAccountList=$(gcloud alpha billing accounts list)
	billingAccountCount=$(echo -n "${billingAccountList}" | grep -c '^')
	if [[ ${billingAccountCount} -lt 1 ]]; then
		echo "No billing account available.  Exiting..."
		exit 1
	else
		if [[ ${billingAccountCount} -eq 2 ]]; then
			billingAccountId=$(echo "$(gcloud alpha billing accounts list)" | sed -n 2p | awk '{print $1}')
		else
			echo "SR# $("$(gcloud alpha billing accounts list)" | sed -n 1p)"
			for (( c=2; c<=${billingAccountCount}; c++ ))
			do  
				echo " $($c-1) $(gcloud alpha billing accounts list | sed -n ${billingAccountSelect}p)"
			done
			read -p "Please enter the row number for the billing account to use.  Ignore the header row. : " billingAccountSelect
			billingAccountSelect=${billingAccountSelect}+1
			billingAccountId=$("$(gcloud alpha billing accounts list)" | sed -n ${billingAccountSelect}p | awk '{print $1}')
		fi
		echo "gcloud beta billing projects link ${DIGIKUBE_MASTER_PROJECT} --billing-account=${billingAccountId}"
		gcloud --quiet beta billing projects link "${DIGIKUBE_MASTER_PROJECT}" --billing-account="${billingAccountId}"
	fi
fi

#################################################################
# Enable secretmanager.googleapis.com API
#----------------------------------------------------------------
gcloud services enable secretmanager.googleapis.com --project="${DIGIKUBE_MASTER_PROJECT}"
if [[ $? -gt 0 ]]; then
	echo "ERROR: Error while enabling service secretmanager.googleapis.com for project ${DIGIKUBE_MASTER_PROJECT} project.  Exiting..."
	exit 1
else
	echo "INFO: Enabled service secretmanager.googleapis.com for project ${DIGIKUBE_MASTER_PROJECT} project"
fi

#################################################################
# Create secret to hold core repo access token
#----------------------------------------------------------------

getCoreRepoAccessTokenName=$(gcloud --quiet beta secrets list --project="${DIGIKUBE_MASTER_PROJECT}" --filter="${DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME}"| grep "${DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME}" |  awk '{print $1}')
if [[ $? -gt 0 ]]; then
	echo "WARN: Error while checking availability of ${DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME} secret.  Exiting..."
else
	if [[ "${getCoreRepoAccessTokenName}" == "${DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME}" ]]; then
		echo "INFO: ${DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME} secret already available.  Reusing existing secret."
	else
		echo -n "Please enter the github.com access token : "
		read -s coreRepoAccessTokenValue </dev/tty
		echo -n ${coreRepoAccessTokenValue} | gcloud beta secrets create "${DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME}" --project="${DIGIKUBE_MASTER_PROJECT}" --labels="group=digikube,version=0_1" --locations="${DIGIKUBE_CLOUD_REGION}" --replication-policy="user-managed" --data-file=-
		if [[ $? -gt 0 ]]; then
			echo "ERROR: Error while creating ${DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME} secret"
		else
			echo "INFO: Created ${DIGIKUBE_CORE_REPO_ACCESS_TOKEN_NAME} secret"
		fi
		coreRepoAccessTokenValue=""
		unset coreRepoAccessTokenValue
	fi
fi

#################################################################
# Create secret to hold instance repo access token
#----------------------------------------------------------------

getInstanceRepoAccessTokenName=$(gcloud --quiet beta secrets list --project="${DIGIKUBE_MASTER_PROJECT}" --filter="${DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME}"| grep "${DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME}" |  awk '{print $1}')
if [[ $? -gt 0 ]]; then
	echo "WARN: Error while checking availability of ${DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME} secret.  Exiting..."
else
	if [[ "${getInstanceRepoAccessTokenName}" == "${DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME}" ]]; then
		echo "INFO: ${DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME} secret already available.  Reusing existing secret."
	else
		echo -n "Please enter the instance repository access token : "
		read -s instanceRepoAccessTokenValue </dev/tty
		echo -n ${instanceRepoAccessTokenValue} | gcloud beta secrets create "${DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME}" --project="${DIGIKUBE_MASTER_PROJECT}" --labels="group=digikube,version=0_1" --locations="${DIGIKUBE_CLOUD_REGION}" --replication-policy="user-managed" --data-file=-
		if [[ $? -gt 0 ]]; then
			echo "ERROR: Error while creating ${DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME} secret"
		else
			echo "INFO: Created ${DIGIKUBE_INSTANCE_REPO_ACCESS_TOKEN_NAME} secret"
		fi
		instanceRepoAccessTokenValue=""
		unset instanceRepoAccessTokenValue
	fi
fi
